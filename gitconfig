; vim: set filetype=gitconfig:
[alias]
    ; `&& :` is appended to aliases to stop them from using extra arguments
    ; `set -e; FOO=$(...)` is used to terminate when <C-c> is pressed in FZF
    ; `xargs` will trim for you if you don't provide other arguments

    c = clone --single-branch
    b = branch
    s = status

    d = diff
    ds = diff --staged HEAD
    db = !git diff $(git base ${1:-HEAD}) ${1} && :

    dt = difftool
    dtb = !git difftool $(git base ${1:-HEAD}) ${1:-HEAD} && :

    base = !git merge-base ${1:-HEAD} master && :
    branch-name = rev-parse --abbrev-ref HEAD
    head = rev-parse HEAD

    new = !git co -b jerry-${1?} ${2:-HEAD} && :
    rand = !git co -b jerry-rand-$(shuf -n 1 ~/.word_list.txt) ${1:-HEAD} && :
    test = !git co -b $(git branch-name)-test && :
    backup = !git co -b $(git branch-name)-backup && git co - && :

    save = !git add -A && git commit -m \"${1:-$(shuf -n 1 ~/.word_list.txt)}\" && git push && :
    resave = !git add -A && git recommit && git push -f && :

    cleanup = !"f() { set -e; BRANCHES=$(git pick-branches-wo-master); git branch -D $BRANCHES; }; f"

    l = log --oneline master..
    ls = log --oneline --graph --since='1 month ago' --simplify-by-decoration --branches
    lsa = log --oneline --graph --simplify-by-decoration --branches

    ri = !"f() { set -e; BRANCH=$(git pick-branch); git rebase --interactive $BRANCH; }; f"
    rim = rebase --interactive master
    rib = !git rebase --interactive $(git base) && :
    rom = !git fetch origin master:master && git rebase master && :

    bmerge = !"f() { set -e; BRANCH=$(git pick-branch); git merge --squash $BRANCH && git commit -m \"[MERGED] $BRANCH\"; }; f"

    co = checkout
    com = checkout master
    cob = !"f() { set -e; BRANCH=$(git pick-branch); git co $BRANCH; }; f"

    get = !git fetch origin ${1?}:jerry-${1?} && git checkout jerry-${1?} && :

    update = fetch origin master:master

    unstage = reset -q HEAD
    recommit = commit --amend --no-edit
    uncommit = reset --soft HEAD^

    rev = !"f() { set -e; COMMIT=$(git pick-commit); git revert $COMMIT; }; f"
    fix = !"f() { set -e; COMMIT=$(git pick-commit); git commit --fixup $COMMIT; }; f"

    stow = !"if [[ $(git log -1 --format=%B) == '[STOWED]' ]]; then git commit -a --amend --no-edit; else git add -A && git commit -m '[STOWED]'; fi"
    unstow = !"if [[ $(git log -1 --format=%B) == '[STOWED]' ]]; then git reset @^; else echo \"Nothing to unstow\"; fi"

    fzf-commit = !"f() { fzf --reverse --ansi --no-info --multi --preview='git show --color=always {1} --stat' --preview-window='up:70%:sharp'; }; f"
    fzf-branch = !"f() { fzf --reverse --ansi --no-info --multi --preview='git log --oneline --color master..{1}' --preview-window='up:70%:sharp'; }; f"

    pick-commit = !"f() { set -euo pipefail; git log --oneline master..HEAD --color | git fzf-commit | cut -f 1 -d ' ' | head -n 1 | tr -d '\\n'; }; f"
    pick-branch = !"f() { set -euo pipefail; git branch | rg -v '^\\*' | awk '{$1=$1};1' | git fzf-branch | cut -f 1 -d ' ' | head -n 1 | tr -d '\\n'; }; f"
    pick-branch-wo-master = !"f() { set -euo pipefail; git branch | rg -v '^\\*' | rg -v 'master' | awk '{$1=$1};1' | git fzf-branch | head -n 1 | tr -d '\\n'; }; f"
    pick-branches = !"f() { set -euo pipefail; git branch | rg -v '^\\*' | awk '{$1=$1};1' | git fzf-branch | tr '\\n' ' '; }; f"
    pick-branches-wo-master = !"f() { set -euo pipefail; git branch | rg -v '^\\*' | rg -v 'master' | awk '{$1=$1};1' | git fzf-branch | tr '\\n' ' '; }; f"

    ci = !hub ci-status --color -v ${1:-HEAD} && :
    watch-ci = !watch --color -n 30 git ci && :

[commit]
    gpgSign = false
    verbose = true

[color]
    ui = true

[color "diff-highlight"]
    oldNormal = red
    oldHighlight = red bold reverse
    newNormal = green
    newHighlight = green bold reverse

[color "diff"]
    meta = white
    frag = magenta bold
    old = red
    new = green
    whitespace = red reverse

[help]
    autocorrect = 1

[log]
    date = relative

[diff]
    algorithm = patience
    indentheuristic = true
    tool = nvimdiff

[difftool]
    prompt = true

[difftool "nvimdiff"]
    cmd = nvim -d $LOCAL $MERGED -c 'wincmd w'

[merge]
    conflictstyle = diff3
    tool = nvimdiff

[mergetool]
    prompt = true

[mergetool "nvimdiff"]
    cmd = nvim -d $LOCAL $REMOTE $MERGED -c 'wincmd w' -c 'wincmd J'

[pull]
    ff = only
    rebase = true

[push]
    default = current

[rebase]
    autostash = true
    autosquash = true

[stash]
    showPatch = true

[include]
    path = .gitconfig.local

[core]
    excludesfile = ~/.gitignore
    pager = delta

[interactive]
    ; make interactive commands such as `git add --patch` use delta to colorize
    diffFilter = delta --color-only

[delta]
    minus-style = red bold
    minus-emph-style = bold underline red
    minus-non-emph-style = syntax
    minus-empty-line-marker-style = normal
    plus-style = green bold
    plus-emph-style = bold underline green
    plus-non-emph-style = syntax
    plus-empty-line-marker-style = normal

    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul

    line-numbers-minus-style = red
    line-numbers-plus-style = green

    features = side-by-side

[url "git@github.com:"]
    insteadOf = gh:

[url "git@github.com:jearbear/"]
    insteadOf = me:
