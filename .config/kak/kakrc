colorscheme catppuccin_mocha


#
# OPTIONS
#

set-option global startup_info_version 20250603
set-option global scrolloff 5,5
set-option global autoreload true
set-option global ui_options terminal_enable_mouse=false terminal_assistant=none
set-option global modelinefmt '%val{bufname} {{context_info}} {{mode_info}}'

set-option global grepcmd 'rg --column --smart-case --sort path'

add-highlighter global/ wrap -indent -marker ...
add-highlighter global/ show-matching -previous


#
# COMMANDS
#

define-command pick-file -docstring 'fuzzy find a file' %{
    prompt -shell-script-candidates 'fd --type file' file: %{ edit -existing %val{text} }
}

define-command pick-buffer -docstring 'fuzzy find a buffer' %{
    prompt -buffer-completion buffer: %{ buffer %val{text} }
}

define-command dbg -docstring 'open debug buffer' %{
    evaluate-commands 'buffer *debug*'
}


#
# MAPPINGS
#

map global user w :w<ret>             -docstring "save file" 
map global user q :q<ret>             -docstring "quit" 
map global user x :wq<ret>            -docstring "save + quit" 
map global user / :comment-line<ret>  -docstring "comment line(s)" 
map global user f ":pick-file<ret>"   -docstring "pick file" 
map global user l ":pick-buffer<ret>" -docstring "pick buffer" 
map global user n ":new<ret>"         -docstring "open new window" 
map global user * '*%s<ret>'          -docstring "select all"

# Insert lines above/below
map global normal <ret> <a-o>
map global normal <s-ret> <a-O>

# Readline mappings
map global insert <c-a> <home>
map global insert <c-e> <end>
map global insert <c-f> <right>
map global insert <c-b> <left>
map global insert <c-d> <del>
map global insert <c-h> <backspace>
map global insert <c-k> '<a-;>;<a-;>Gl<a-;>"_d'
map global insert <c-u> '<a-;>;<a-;>h<a-;>Gh<a-;>"_d'
map global insert <c-w> '<a-;><a-/>\S+\s*<ret><a-;>d'

# Faster scrolling
map global normal <c-d> 5j
map global normal <c-u> 5k

# Redo like vim
map global normal <c-r> <s-u>

# Goto beginning of line like vim
map global normal 0 'gi'

# Indent in insert mode
map global insert <c-,> '<a-;><'
map global insert <c-.> '<a-;>>'

# Make history navigation harder to trigger on accident
map global normal <c-j> ''
map global normal <c-k> ''
map global normal <c-s-j> <c-j>
map global normal <c-s-k> <c-k>

# Edit config files quickly
map global user C ':edit ~/.config/kak/kakrc<ret>' -docstring 'edit kakrc'



#
# HOOKS
#

# Save file on focus lost
hook global FocusOut .* %{ try "write" }

# Change cursor color depending on the mode
hook global ModeChange push:.*:insert %{
    set-face window CursorLine CursorLineInsertMode
}
hook global ModeChange pop:insert:.* %{
    unset-face window CursorLine
}

# Highlight current line
hook global RawKey .+ %{
    try %{ remove-highlighter window/cursor-line }
    try %{ add-highlighter window/cursor-line line %val{cursor_line} CursorLine }
}


#
# PLUGINS
#

hook global ModuleLoaded kitty %{
    set-option global kitty_window_type "%sh{ test $(uname) = Darwin && echo 'window' || echo 'os-window' }"
}

# Always use spaces for indentation
hook global BufOpenFile .* expandtab
hook global BufNewFile  .* expandtab

hook global ModuleLoaded smarttab %{
    set-option global indentwidth 4
    set-option global softtabstop 4
}

hook global WinSetOption filetype=markdown %{
    set-option buffer indentwidth 2
    set-option buffer softtabstop 2
}

#
# LSP
#

eval %sh{kak-lsp}
lsp-enable
remove-hooks global lsp-filetype-.*

# Enable auto-formatting if LSP is enabled
hook global BufSetOption lsp_servers=* %{
    hook -group lsp buffer BufWritePre .* lsp-formatting-sync
}

hook global BufSetOption filetype=python %{
    set-option buffer lsp_servers %{
        [pyright-langserver]
        root_globs = ["requirements.txt", "setup.py", "pyproject.toml", "pyrightconfig.json", ".git", ".hg"]
        args = ["--stdio"]
        [pyright-langserver.settings.pyright]
        disableOrganizeImports = true
        [pyright-langserver.settings.python.analysis]
        typeCheckingMode = "off"
    }
}

hook global BufSetOption filetype=nix %{
    set-option buffer lsp_servers %{
        [nil]
        root_globs = ["flake.nix", "shell.nix", ".git", ".hg"]
    }
}

hook global BufSetOption filetype=(elixir|eex) %{
    set-option buffer lsp_servers %{
        [elixir-ls]
        root_globs = ["mix.exs"]
        settings_section = "elixirLS"
        [elixir-ls.settings.elixirLS]
        # See https://github.com/elixir-lsp/elixir-ls/blob/master/apps/language_server/lib/language_server/server.ex
        dialyzerEnable = false
    }
}
