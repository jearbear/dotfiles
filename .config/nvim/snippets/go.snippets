snippet for
	for _, ${1:e} := range ${2:collection} {
		${0:${VISUAL}}
	}
snippet fori
	for i := 0; i < ${1:count}; i++ {
		${0:${VISUAL}}
	}
snippet func
	func ${1:funcName}(${2}) ${3:error} {
		${0}
	}
snippet funcc
	func ${1:funcName}(ctx context.Context, exec boil.ContextExecutor${2:, vendor *models.Vendor}) ${3:error} {
		${0}
	}
snippet afunc
	${1:funcName} := func(${2}) ${3:}{
		${0}
	}
snippet ife
	if err != nil {
		return err
	}
	${0}
snippet ifenr
	if err != nil && !errorz.Is(err, sql.ErrNoRows) {
		return err
	}
	${0}
snippet ifne
	if err != nil {
		return nil, err
	}
	${0}
snippet ifnenr
	if err != nil && !errorz.Is(err, sql.ErrNoRows) {
		return nil, err
	}
	${0}
snippet ctx
	ctx := context.Background()${0}
snippet actx
	ctx context.Context${0}
snippet debug
	fmt.Printf("\n\n[$1]: %+v\n\n\n", ${1:val})${0}
snippet jdebug
	b, _ := json.MarshalIndent(${1:val}, "", "\t")
	fmt.Printf("\n\n[$1]: %+v\n\n\n", string(b))${0}
snippet test
	func Test${1:name}(t *testing.T) {
		t.Parallel()

		ctx := context.Background()
		db := testdb.New(t)
		tf := testfactory.New(t, db)
		srv := services.TestServicesWithDB(t, db)

		${0}
	}
snippet trun
	t.Run("${1:testName}", func(t *testing.T) {
		${0}
	})
snippet rne
	require.NoError(t, err)${0}
snippet ree
	require.EqualError(t, err, ${1:sql.ErrNoRows})${0}
snippet req
	require.Equal(t, ${1:expected}, ${2:actual})${0}
snippet reqv
	require.EqualValues(t, ${1:expected}, ${2:actual})${0}
snippet ret
	require.True(t, ${1:boolean})${0}
snippet ref
	require.False(t, ${1:boolean})${0}
snippet rel
	require.Len(t, ${1:enumerable}, ${2:len})${0}
snippet bc
	boil.ContextExecutor${0}
snippet usd
	models.CurrencyUsd
snippet eur
	models.CurrencyEur
snippet gbp
	models.CurrencyGBP
snippet diff
	ignoreFields := cmpopts.IgnoreFields(models.${1:modelName}{}, "ID", "PublicID", "CreatedAt", "UpdatedAt")
	if diff := cmp.Diff(want, got, ignoreFields); diff != "" {
		t.Fatalf("(-want +got):\n%s", diff)
	}
	${0}
snippet rexec
	_, err := ${1:exec}.ExecContext(ctx, \`
		${0}
	\`)
snippet evd
	enums.VendorDecision${1|Approved,OnHold,Declined|}${0}
snippet *mv
	*models.Vendor${0}
snippet mv
	models.Vendor${0}
snippet *mvr
	*models.VendorRating${0}
snippet mvr
	models.VendorRating${0}
snippet *mvar
	*models.VendorActiveRating${0}
snippet mvar
	models.VendorActiveRating${0}
snippet query
	${1:vendors}, err := models.${2:Vendors}(${3}).${4:All}(ctx, exec)${0}
snippet backfill
	func backfill${1:Name}(ctx context.Context, _ logrus.FieldLogger, srv *services.Services) error {
		db := srv.DB

		${0}
	
		return nil
	}
snippet rawq
	query := \`\`
	var resp []struct{}
	if err := queries.Raw(query).Bind(ctx, exec, &resp); err != nil {
		return err
	}
	${0}
